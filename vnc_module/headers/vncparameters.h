/* Copyright (C) 2002-2008 RealVNC Ltd.  All Rights Reserved.  */

#ifndef __VNCPARAMETERS_H__
#define __VNCPARAMETERS_H__

/**
 * \file vncparameters.h
 *
 * This header file contains macros that expand to the names of VNC viewer
 * parameters.  These are for use in calls to VNCViewerSetParameter() and
 * VNCViewerGetParameter().
 *
 * The parameters are divided into categories:
 *
 *  - Basic parameters.  You should read about these before you begin
 *    developing with the SDK.
 *  - Connection parameters.  These control how the SDK will connect to the VNC
 *    server.  Changing the values of these parameters after a connection has
 *    been established will have no effect.
 *  - Advanced parameters.  These control aspects of the SDK's behaviour that
 *    are visible by an end-user.  The default values will be sensible for most
 *    applications.
 *  - Tuning parameters.  These control SDK internals, and are usually best
 *    left alone.
 *  - Debugging parameters.  These are intended to be used by VNC viewer or
 *    server developers.
 *
 * All parameter values are passed to and from the SDK as strings.  If a
 * parameter is listed as having an integer value, then the string should
 * contain the value formatted in decimal.  If a parameter is listed as having
 * a Boolean value, the string should have the value "0" or "1".
 *
 * Many parameters apply only to the default desktop window.  If the default
 * desktop window is not in use, then setting one of its parameters it will
 * have no effect.
 *
 * \see VNCViewerSetParameter, VNCViewerGetParameter
 */

/**
 * \name Basic parameters
 */
/*@{*/

/**
 * \brief If true, the SDK will adapt to changes in the available bandwidth by
 * changing the pixel format and and encoding.
 *
 * If you implement a VNCViewerImageRectangleCallback,
 * VNCViewerFillRectangleCallback or VNCViewerCopyRectangleCallback, then you
 * are strongly advised to select pixel formats manually with
 * VNCViewerSetPixelFormat().  Otherwise, you must be prepared to deal with any
 * pixel format that AutoSelect might choose.
 *
 * Manually selecting a pixel format will automatically disable AutoSelect.
 *
 * Boolean, default true.  
 *
 * \see VNCParameterColorLevel, VNCParameterFullColor,
 * VNCViewerSetPixelFormat()
 */
#define VNCParameterAutoSelect "AutoSelect"

/**
 * \brief If true, then the default desktop window will hide its window frame
 * and occupy the entire screen.
 *
 * Boolean, default false.
 *
 * \see VNCParameterFullScreenChangeResolution, VNCParameterFullScreenHint
 */
#define VNCParameterFullScreen "FullScreen"

/**
 * \brief The RSA key pair for use with the session.
 *
 * You should assign a value to this parameter after calling VNCViewerCreate()
 * but before calling VNCViewerStart().  Failing to do this will cause
 * connections to any server that requires authentication to fail.
 *
 * An RSA key pair can be generated by calling VNCGenerateRSAKeys().
 *
 * No default.
 *
 * \see VNCGenerateRSAKeys()
 */
#define VNCParameterRSA_Private_Key "RSA_Private_Key"

/**
 * \brief Describes how the default desktop window will scale the server
 * desktop.
 *
 * The value of this parameter can take one of the following forms:
 *
 *  - "None" - original size
 *  - "Fit" - fit to the window without preserving the aspect ratio
 *  - "AspectFit" - fit to the window and preserve the aspect ratio
 *  - WidthxHeight - scale to exactly this size (e.g. "800x600")
 *  - Percent% - scale width and height to this percentage (e.g. "50%")
 *  - WidthPercent%xHeightPercent% - scale width and height independently to
 *    these percentages (e.g. "70%x40%")
 *  - Widthx - scale width to exactly this value but do not scale height (e.g.
 *   "800x")
 *  - xHeight - scale height to exactly this value but do not scale width (e.g.
 *   "x600")
 *  - "FixedWindow" - like fit to window, but server desktops larger than the 
 *    window will be scaled down, smaller server desktops will be centered and
 *    surrounded by a black border. The window will not resize from the 
 *    server dimensions upon initial connection.
 *  - FWidthxHeight - as FixedWindow above, but the window size will be fixed
 *    at the specified WidthxHeight value (e.g. "F800x600")
 *
 * Most applications will use either "None" or "AspectFit".
 * 
 * Default "None".
 */
#define VNCParameterScaling "Scaling"

/*@}*/

/**
 * \name Connection parameters
 */
/*@{*/

/**
 * \brief The proxy server through which to make outgoing connections.
 *
 * Supported proxies are HTTP 1.1 proxies (using the CONNECT request method)
 * and SOCKS 5 proxies.  Proxy authentication is not supported.
 *
 * The value takes one of the forms:
 *
 *  - domain-name:port
 *  - IPv4-address:port
 *  - [IPv6-address]:port
 *
 * No default.
 */
#define VNCParameterProxyServer "ProxyServer"

/**
 * \brief Indicates whether the ProxyServer is an HTTP proxy or a SOCKS 5
 * proxy.
 *
 * The value should be either "httpconnect" or "socks".
 *
 * No default.
 */
#define VNCParameterProxyType "ProxyType"

/**
 * \brief If true, the server will continue to share its desktop with other
 * viewers.
 *
 * If false, then the server will disconnect other viewers when you
 * successfully establish a connection.  However, the server will continue to
 * accept further connections.
 *
 * Boolean, default true.
 */
#define VNCParameterShared "Shared"

/*@}*/

/**
 * \name Advanced parameters
 */
/*@{*/

/**
 * \brief If true, the SDK will produce a system beep when it receives an RFB
 * Bell message.
 *
 * Boolean, default true.
 */
#define VNCParameterAcceptBell "AcceptBell"

/**
 * \brief If true, then the SDK will send ClientCutText RFB messages to the
 * server.
 *
 * ClientCutText messages are generated by the default desktop window when the
 * local clipboard contents change, or by calling VNCViewerSendClientCutText().
 *
 * \see VNCViewerSendClientCutText(), VNCParameterServerCutText
 */
#define VNCParameterClientCutText "ClientCutText"

/**
 * \brief The color level for the session, which in turn dictates the pixel
 * format.
 *
 * This parameter can take one of the following values:
 *
 *  - 0, which means 8 colors, true color (RGB111)
 *  - 1, which means 64 colors, true color (RGB222)
 *  - 2, which means 256 colors, indexed
 *  - 3, which means either the server's native pixel format or the local
 *    native pixel format (whichever has fewer colors)
 *
 * If AutoSelect is true and FullColor is false, AutoSelect will vary the pixel
 * format between that given by the current value of ColorLevel and that given
 * by ColorLevel "3".
 *
 * If AutoSelect is true and FullColor is true, ColorLevel will be ignored
 * completely, and the pixel format used will be the one that would have been
 * given by ColorLevel "3".
 *
 * If AutoSelect is false, the pixel format will always be the one given by
 * ColorLevel, unless it has been overriden by a call to
 * VNCViewerSetPixelFormat().
 *
 * Integer, default 2.
 *
 * \see VNCParameterAutoSelect, VNCParameterFullColor, VNCViewerSetPixelFormat
 */
#define VNCParameterColorLevel "ColorLevel"

/**
 * \brief The window icon for the default desktop window.
 *
 * On Windows, this should be a filesystem path to an icon (.ico) file.  The
 * file should contain at least a 16x16 icon and a 48x48 icon.
 *
 * On UNIX, this should be a hex string generated by the vncicontostring
 * script.  See the manual page for that script for more information.  The
 * window manager must support the _NET_WM_ICON property for the icon to be
 * visible.
 *
 * Default is the standard RealVNC Viewer icon.
 */
#define VNCParameterDesktopWindowIcon "DesktopWindowIcon"

/**
 * \brief Override the window title for the default desktop window.
 *
 * The default desktop window name will be the server desktop name, as 
 * provided to applications in the VNCViewerServerInitCallback(). This
 * parameter allows the window name to be overridden from sample
 * applications.
 *
 * Note that this will not return the name provided by the server, that 
 * will be provided by the VNCViewerServerInitCallback()'s desktopName 
 * parameter. DesktopWindowTitle will be empty unless set by the application.
 * 
 */
#define VNCParameterDesktopWindowTitle "DesktopWindowTitle"

/**
 * \brief The X server on which to open the default desktop window (UNIX only).
 *
 * Default is the value of the DISPLAY environment variable.
 *
 * \see VNCParameterGeometry
 */
#define VNCParameterDisplay "display"

/**
 * \brief If true, special Windows key sequences will be captured by the
 * default desktop window and sent to the server (Windows only).
 *
 * For example, when this parameter is set, Alt-Tab will switch between
 * applications on the server desktop.
 *
 * If false, the special key sequences will be processed as they would be
 * normally.
 *
 * Boolean, default true.
 */
#define VNCParameterDisableWinKeys "DisableWinKeys"

/**
 * \brief If true, when the server hides the cursor, a dot will be drawn at the
 * cursor location (UNIX only).
 *
 * This parameter has no effect if the UseLocalCursor parameter is false.
 *
 * Boolean, default true.
 *
 * \see VNCParameterUseLocalCursor
 */
#define VNCParameterDotWhenNoCursor "DotWhenNoCursor"

/**
 * \brief If true, the default desktop window will emulate a three-button mouse
 * (Windows only).
 *
 * This allows the user to simulate a click of the middle mouse button by
 * pressing the left and right mouse buttons simultaneously.
 *
 * Boolean, default false.
 */
#define VNCParameterEmulate3 "Emulate3"

/**
 * \brief If true, the session will always use the highest color depth
 * available, even if AutoSelect is enabled.
 *
 * However, AutoSelect will continue to adjust the encoding according to the
 * available bandwidth.
 *
 * If false, the session will begin with the color depth indicated by the
 * ColorLevel parameter, but AutoSelect may change the color depth as well as
 * the encoding.
 *
 * Boolean, default false.
 *
 * \see VNCParameterAutoSelect, VNCParameterFullColor
 */
#define VNCParameterFullColor "FullColor"

/**
 * \brief If true, the default desktop window will change the local screen
 * resolution to match the size of the server desktop if it is full-screened
 * (Windows only).
 *
 * If false, the window will still be full-screened, but the resolution will
 * not be changed and the Scaling parameter will govern how the server desktop
 * is drawn.
 *
 * Boolean, default false.
 *
 * \see VNCParameterFullScreen
 */
#define VNCParameterFullScreenChangeResolution "FullScreenChangeResolution"

/**
 * \brief The X geometry string for the default desktop window (UNIX only).
 *
 * This can be used as an alternative to the Scaling parameter, or to position
 * the window exactly on the screen.
 *
 * \see VNCParameterDisplay, VNCParameterScaling
 */
#define VNCParameterGeometry "geometry"

/**
 * \brief If true, the default desktop window will interpret dead keys and send
 * the composed characters to the server (UNIX only).
 *
 * If false, the key symbols for the dead keys and uncomposed characters will
 * be sent to the server, which will then interpret them.
 *
 * Boolean, default false.
 */
#define VNCParameterInterpretDeadKeys "InterpretDeadKeys" 

/**
 * \brief Device name of the monitor on which to open the default desktop
 * window (Windows only).
 *
 * No default.
 */
#define VNCParameterMonitor "Monitor"

/**
 * \brief Selects a particular desktop of a multi-desktop server.
 *
 * The value should be the desktop name or number, as it is known to the
 * server.
 *
 * No default.
 */
#define VNCParameterSelectDesktop "SelectDesktop"

/**
 * \brief If true, the SDK will send RFB KeyEvent messages to the server.
 *
 * If false, all KeyEvent messages will be suppressed, including those
 * generated by VNCViewerSendKeyEvent().
 *
 * Boolean, default true.
 *
 * \see VNCParameterSendPointerEvents, VNCViewerSendKeyEvent()
 */
#define VNCParameterSendKeyEvents "SendKeyEvents"

/**
 * \brief If true, the SDK will send RFB PointerEvent messages to the server.
 *
 * If false, all PointerEvent messages will be suppressed, including those
 * generated by VNCViewerSendPointerEvent().
 *
 * Boolean, default true.
 *
 * \see VNCParameterSendKeyEvents, VNCViewerSendPointerEvent()
 */
#define VNCParameterSendPointerEvents "SendPointerEvents"

/**
 * \brief If true, the default desktop window will send the local X server's
 * primary selection to the VNC server, as well as the clipboard selection
 * (UNIX only).
 *
 * If false, only the clipboard selection will be sent.
 *
 * This parameter has no effect if the ClientCutText parameter is false.
 *
 * Boolean, default true.
 *
 * \see VNCParameterClientCutText
 */
#define VNCParameterSendPrimary "SendPrimary"

/**
 * \brief If true, then the SDK will process ServerCutText messages received
 * from the server.
 *
 * This will result in the VNCViewerServerCutTextCallback() being called, and,
 * if the default desktop window is in use, the local clipboard will be updated
 * to reflect the server clipboard contents.
 *
 * Boolean, default true.
 *
 * \see VNCViewerServerCutTextCallback(), VNCParameterServerCutText
 */
#define VNCParameterServerCutText "ServerCutText"

/**
 * \brief If true, the default desktop window will bypass local Input Method
 * Editors (Windows only).
 *
 * This allows the user to enter text using a server-side Input Method Editor.
 *
 * If false, the default desktop window will allow local Input Method Editors
 * to function as normal.
 *
 * Boolean, default true.
 */
#define VNCParameterSuppressIME "SuppressIME"

/**
 * \brief If true, the default desktop window will use all local monitors when
 * it is full-screened (Windows only).
 *
 * If false, the default desktop window will use only the full screen of the
 * monitor that is currently displaying it.
 *
 * Boolean, default false.
 */
#define VNCParameterUseAllMonitors "UseAllMonitors"

/**
 * \brief If true, the SDK will remain connected to the server if the server
 * desktop is resized (Windows only).
 *
 * If false, the server will disconnect the SDK session if the server desktop
 * is resized.
 *
 * Boolean, default true.
 */
#define VNCParameterUseDesktopResize "UseDesktopResize"

/**
 * \brief If true, the mouse cursor will be rendered locally.
 *
 * Rendering the mouse cursor locally can provide a large difference in
 * perceived responsiveness.  Allowing the server to render the mouse cursor
 * requires the screen update corresponding to each mouse move to be received
 * before the user sees that the pointer has moved.
 *
 * If false, the mouse cursor will be rendered by the server.
 *
 * Boolean, default true.
 */
#define VNCParameterUseLocalCursor "UseLocalCursor"

/*@}*/

/**
 * \name Tuning parameters
 */
/*@{*/

/**
 * \brief If true, the default desktop window will use the
 * _NET_WM_STATE_FULLSCREEN window manager property when it is fullscreened
 * (UNIX only).
 *
 * If false, the default desktop window will attempt to fullscreen itself
 * without using this property.
 *
 * If the window manager does not support this property, this parameter has no
 * effect.
 *
 * \see VNCParameterFullScreen
 */
#define VNCParameterFullScreenHint "FullScreenHint"

/**
 * \brief The number of seconds for which the SDK will continue attempting to
 * flush its output buffers before closing a hung connection (Windows only).
 *
 * Integer, default 300 (5 minutes).
 */
#define VNCParameterLazyFlushTimeout "LazyFlushTimeout"

/**
 * \brief The maxium size in bytes of the payload of a ServerCutText RFB
 * message.
 *
 * If a ServerCutText message is received with a longer payload, it will be
 * discarded.  The VNCViewerServerCutTextCallback() will not be called and the
 * local clipboard will not be altered.
 *
 * Integer, default 262144 (256kb).
 */
#define VNCParameterMaxCutText "MaxCutText"

/**
 * \brief The maximum size in bytes to which the SDK will grow its output
 * buffer.
 *
 * Note that the output buffer only grows if the OS consistently reports that
 * attempts to write to the network would block.
 *
 * Integer, default 4194304 (4Mb).
 */
#define VNCParameterMaxOutBufferSize "MaxOutBufferSize"

/**
 * \brief If true, the default desktop window will use a private colormap (UNIX
 * only).
 *
 * This provides a workaround in the case that other applications on the same X
 * server report that they are unable to allocate colors.
 *
 * Boolean, default false.
 */
#define VNCParameterOwncmap "owncmap"

/**
 * \brief The number of milliseconds that the default desktop window will delay
 * between sending consecutive PointerEvent RFB messages.
 *
 * Sending fewer PointerEvents will cause the server to send fewer desktop
 * updates.  Setting this parameter can provide for better perceived
 * responsiveness in low bandwidth conditions.
 *
 * A value of 0 means that there is no delay; every local pointer move will
 * generate a PointerEvent RFB message.
 *
 * Integer, default 0.
 */
#define VNCParameterPointerEventInterval "PointerEventInterval"

/**
 * \brief The name of the preferred RFB encoding.
 *
 * Setting this parameter causes a SetEncodings RFB message to be sent to the
 * server.  The message contains all of the supported encodings, including any
 * custom encodings registered with VNCViewerRegisterRectangleDecoder(), but
 * indicates that the given encoding is the preferred one.  The server may
 * choose to ignore the SDK's preference, and may always choose to send data
 * using the Raw encoding.
 *
 * See the RFB 4.0 or 3.8 specification for more information about encodings.
 *
 * The value is either "ZRLE", "Hextile", "RRE", or "Raw", but note that, for
 * historical reasons, "Hextile" is taken to mean "TRLE".
 *
 * \see VNCViewerRegisterRectangleDecoder(), VNCViewerRectangleDecodeCallback()
 */
#define VNCParameterPreferredEncoding "PreferredEncoding"

/**
 * \brief If true, and the protocol in use is RFB 4.0, the default desktop
 * window will use the RelPtr extension to send pointer events to the server.
 *
 * If false, or the protocol in use is not RFB 3.8, the default desktop window
 * will use PointerEvent RFB messages to send pointer events to the server.
 *
 * All applications wishing to support relative pointer motion events must 
 * implemement a RelativePtr parameter toggle feature which sets the parameter
 * on and off as appropriate. Applications which do not use the default Desktop
 * Window must implement a pointer grabbing mechanism and also must provide
 * relative pointer values to VNCViewerSendPointerEvent.
 *
 * Boolean, default false.
 *
 * \see VNCViewerSendPointerEvent()
 */
#define VNCParameterRelativePtr "RelativePtr"

/**
 * \brief If true, and the protocol in use is RFB 4.0, the sdk will attempt 
 * to use the Scancode extension to send key events to the server in a
 * USB key code form.
 *
 */
#define VNCParameterUseScancode "UseScancode"

/**
 * \brief Threshold for snapping the default desktop window to the actual
 * desktop size (Windows only).
 *
 * If the user resizes the default desktop window so that the width of its
 * client area is within this number of pixels of the width of the server
 * desktop, then the window will be automatically resized so that the width of
 * its client area is exactly equal to the width of the server desktop.
 *
 * The same logic is applied to the height of the default desktop window.
 *
 * Making the width or height of the the default desktop window equal to the
 * width of height of the server desktop allows for smoother scaling.  If both
 * the width and height are equal to those of the server desktop, the SDK can
 * bypass scaling completely and free its scaling buffer.
 *
 * Integer, default 10 (pixels).
 */
#define VNCParameterSnapThreshold "SnapThreshold"

/**
 * \brief If true, the SDK will use native GDI calls to scale the server
 * desktop to the client area of the default desktop window (Windows only).
 *
 * If false, the SDK will use its own internal scaling code.  This results in
 * more readable text (because GDI image scaling is designed to scale images
 * smoothly, not text), but requires the SDK to allocate a scaling buffer.
 *
 * Boolean, default false.
 */
#define VNCParameterUseNativeScaling "UseNativeScaling"

/**
 * \brief The total height of the top and bottom borders provided by the window
 * manager to the default desktop window (UNIX only).
 *
 * The default desktop window will not allow the user to resize it so that it
 * is taller than the local desktop.  The maximum height of the scaled server
 * desktop is therefore (height of local desktop - WMDecorationHeight).
 *
 * Integer, default 24 (pixels).
 *
 * \see VNCParameterWMDecorationWidth
 */
#define VNCParameterWMDecorationHeight "WMDecorationHeight"

/**
 * \brief The total width of the left and right borders provided by the window
 * manager to the default desktop window (UNIX only).
 *
 * The default desktop window will not allow the user to resize it so that it
 * is wider than the local desktop.  The maximum width of the scaled server
 * desktop is therefore (width of local desktop - WMDecorationHeight).
 *
 * Integer, default 6 (pixels).
 *
 * \see VNCParameterWMDecorationHeight
 */
#define VNCParameterWMDecorationWidth "WMDecorationWidth"

/*@}*/

/**
 * \name Debugging parameters
 */
/*@{*/

/**
 * \brief The number of milliseconds for which the default desktop window will
 * XOR CopyRect updates by SrcXor or DstXor.
 *  
 * This can be used to verify that the server is using the very cheap CopyRect
 * encoding for particular updates.
 *
 * Integer, default 0.
 *
 * \see VNCParameterDebugDelay, VNCParameterSrcXor, VNCParameterDstXor
 */
#define VNCParameterCopyRectDelay "CopyRectDelay"

/**
 * \brief The number of milliseconds for which the default desktop window will
 * invert non-CopyRect updates.
 *  
 * This can be used to see to see the updated regions as the updates are
 * received from the server.
 *
 * Integer, default 0.
 *
 * \see VNCParameterCopyRectDelay
 */
#define VNCParameterDebugDelay "DebugDelay"

/**
 * \brief The value with which to XOR each destination rectangle when using
 * CopyRectDelay.
 *
 * Integer, default 0xff00 (green, if using RGB888 pixels).
 *
 * \see VNCParameterCopyRectDelay, VNCParameterSrcXor
 */
#define VNCParameterDstXor "DstXor"

/**
 * \brief Controls the SDK's logging.
 *
 * The value of this parameter is a non-empty comma-separated list of entries
 * of the form
 *
 *  - source:destination:level
 *
 * source is the name of one of the SDK's logging sources, or "*" to mean all
 * sources.  Begin by using "*", and then filter down to the individual sources
 * that interest you.
 *
 * destination is either "stdout" or "stderr" to mean either the standard
 * output or the standard error, or an empty string  to mean that this source
 * should not be logged.  To redirect logging to a file, either use the shell
 * or use the standard library function freopen().
 *
 * level is an integer from 0 to 100 inclusive.  The SDK defines these logging
 * levels:
 *
 *  -   0 - serious errors
 *  -  10 - less serious errors
 *  -  30 - informational messages
 *  - 100 - verbose debugging
 *
 * Default "*::0" (no logging at all).
 */
#define VNCParameterLog "Log"

/**
 * \brief Forces the SDK to use RFB 3.3 protocol when connecting to a server.
 *
 * Note: requires the SDK to be licensed
 *
 */
#define VNCParameterProtocol3_3 "Protocol3.3"

/**
 * \brief The value with which to XOR each source rectangle when using
 * CopyRectDelay.
 *
 * Integer, default 0xff (blue, if using RGB888 pixels).
 *
 * \see VNCParameterCopyRectDelay, VNCParameterDstXor
 */
#define VNCParameterSrcXor "SrcXor"

/*@}*/

#endif /* !defined(__VNCPARAMETERS_H__) */
